<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Rslib Blog</title>
        <link>https://israelprempeh.com</link>
        <description>Rslib is a library development tool that leverages the well-designed configurations and plugins of Rsbuild.</description>
        <lastBuildDate>Mon, 21 Jul 2025 12:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Rslib: Build library with Rspack]]></title>
            <link>https://israelprempeh.com/blog/introducing-rslib</link>
            <guid>/blog/introducing-rslib</guid>
            <pubDate>Wed, 14 May 2025 10:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p><em>May 14, 2025</em></p>
<h1 id="rslib-build-library-with-rspack">Rslib: Build library with Rspack<a aria-hidden="true" href="#rslib-build-library-with-rspack">#</a></h1>
<p><img src="https://assets.rspack.rs/rslib/rslib-banner.png" alt="banner"></img></p>
<p>We are excited to introduce Rslib — <strong>a library development tool based on Rspack</strong>. Developed by ByteDance Web Infra Team, Rslib helps developers create JavaScript libraries and UI component libraries in a simple and intuitive way while enjoying the ultimate development experience brought by <a href="https://rspack.rs/" target="_blank" rel="noopener noreferrer">Rspack</a> and <a href="https://rsbuild.rs/" target="_blank" rel="noopener noreferrer">Rsbuild</a>.</p>
<blockquote>
<p>Repo：<a href="https://github.com/web-infra-dev/rslib" target="_blank" rel="noopener noreferrer">https://github.com/web-infra-dev/rslib</a></p>
</blockquote>
<h2 id="why-rslib">Why Rslib<a aria-hidden="true" href="#why-rslib">#</a></h2>
<p>In the past, webpack was mainly used for bundling web applications. When developing JavaScript libraries, developers typically introduced excellent bundlers like esbuild or Rollup, which could output high-quality ESM and CJS output to better meet JavaScript library bundling needs.</p>
<p>Within ByteDance, our development teams have created over 10,000 JavaScript libraries. During this process, we observed that the coexistence of multiple bundlers has led to ecosystem fragmentation. Additionally, in more complex library development scenarios, there are still many needs that haven't been well addressed, such as:</p>
<ul>
<li><strong>Configuration Fragmentation</strong>: Library build configurations differ significantly from application development, requiring developers to learn different configuration rules and methods.</li>
<li><strong>Limited Ecosystem Reuse</strong>: Desire to reuse webpack plugins or loaders accumulated in the ecosystem.</li>
<li><strong>Insufficient Extensibility</strong>: Need for rich build lifecycle hooks to meet custom build requirements.</li>
<li><strong>High Cost of Multi-format Output</strong>: Libraries need to be bundled into multiple formats like ESM, CJS, UMD, and Module Federation, requiring repeated configuration with different tools.</li>
<li><strong>Weak Non-JS Resource Handling</strong>: Lack of standardized processing solutions for style schemes and static assets.</li>
<li><strong>Missing Declaration File Support</strong>: Need to bundle d.ts files of dependencies during build.</li>
</ul>
<p>Facing these pain points, we hope the ideal library development tool would:</p>
<ul>
<li><strong>Easy to Configure:</strong> Provide out-of-the-box configurations covering most scenarios, with plugin mechanisms for advanced feature extensions that work right after installation.</li>
<li><strong>Comprehensive Features:</strong> Support not only JavaScript / TypeScript transformation and multi-format output but also provide comprehensive style and resource processing solutions like web application building.</li>
<li><strong>Shared Ecosystem:</strong> Unify library building with application building configurations, reuse Rspack's prosperous community, and promote unified toolchain ecosystem development.</li>
<li><strong>Performance First:</strong> The underlying bundler is implemented in Rust, offering excellent build performance and improving developer experience.</li>
</ul>
<p>Therefore, we created Rslib. <strong>Based on the well-designed configurations and plugins of <a href="https://rsbuild.rs" target="_blank" rel="noopener noreferrer">Rsbuild</a>'s, it empowers library developers to take advantage of the extensive knowledge and ecosystem of webpack and Rspack, providing comprehensive library development features.</strong></p>
<p>We hope Rslib can provide more powerful features for library developers and become an important part of the Rspack ecosystem, continuously promoting the development of unified toolchains based on Rspack.</p>


<h2 id="comprehensive-library-development-features">Comprehensive library development features<a aria-hidden="true" href="#comprehensive-library-development-features">#</a></h2>
<p>Rslib provides a comprehensive library building solution that covers most current library building scenario needs:</p>
<ul>
<li>
<p><strong>Out-of-the-Box Configuration</strong></p>
<p>Rslib provides out-of-the-box library building configurations. With minimal adjustments, it can meet most library building requirements. Moreover, for more advanced integration needs, in most cases, you only need to install the corresponding Rsbuild plugin to complete the setup, avoiding complicated configuration processes.</p>
<p>Rslib's configuration extends from Rsbuild, allowing developers to continue using Rsbuild's configuration and ecosystem, maintaining consistent mental models between application and library development, and reusing build configuration-related code. This is particularly important in large monorepo projects that need to maintain multiple build configurations.</p>
</li>
<li>
<p><strong>Multi-Format Output Support</strong></p>
<p>Rslib supports bundling libraries into various module system formats, including ESM (ES modules), CJS (CommonJS), UMD (Universal Module Definition), and Module Federation. With just one build tool and one configuration file, it can handle all building scenarios, particularly suitable for library development scenarios requiring cross-project and cross-framework reuse. Additionally, through optimizing Rspack's ESM format build output, Rslib can now produce clean, standard ESM output.</p>
<p>For TypeScript declaration files (d.ts), besides supporting d.ts file generation and related post-processing based on TypeScript Compiler API, it also supports bundling d.ts files using <a href="https://www.npmjs.com/package/@microsoft/api-extractor" target="_blank" rel="noopener noreferrer">@microsoft/api-extractor</a>, suitable for handling complex dependency scenarios.</p>




</li>
<li>
<p><strong>Bundle & Bundleless</strong></p>
<p>Rslib supports both bundle and bundleless build modes during build process. For bundleless scenarios, it also supports <a href="/config/lib/redirect">output path redirection</a> feature, solving common issues with alias replacement in JavaScript and d.ts output paths, as well as strict path reference requirements in ESM.</p>


</li>
<li>
<p><strong>Style Solutions</strong></p>
<p>Style building has always been a challenge in UI component library development. Compared to using Less loader, Sass loader, and PostCSS loader in application building, users often need to manually use the native tools of corresponding style solutions when building library output.</p>
<p>Leveraging Rsbuild's plugin system and ecosystem, Rslib can directly reuse solutions for Sass, Less, Stylus, CSS Modules, and Tailwind CSS. Whether in bundle or bundleless scenarios, users can process styles just like building web application, directly through configuration or installing corresponding plugins.</p>


</li>
<li>
<p><strong>Web Resource Handling</strong></p>
<p>Rslib supports referencing static and inline assets like images, fonts, audio, and video in code, as well as static assets in CSS. After installing the appropriate plugins, users can also process SVG files through SVGR, while supporting JSON, TOML, and YAML formats. This feature provides great convenience when building UI component libraries containing resources.</p>
</li>
<li>
<p><strong>Framework Agnostic</strong></p>
<p>Rslib is a framework-agnostic library building solution, supporting Node.js and various UI component library builds. Different DSL UI frameworks only need to integrate corresponding plugins (including React, Preact, Vue, Solid, etc.) to complete underlying build configuration for development.</p>
</li>
</ul>
<h2 id="unlocking-rspack-ecosystem-possibilities">Unlocking Rspack ecosystem possibilities<a aria-hidden="true" href="#unlocking-rspack-ecosystem-possibilities">#</a></h2>
<p>Beyond common JavaScript library development solutions, based on Rspack and the Rsbuild ecosystem, Rslib provides developers with more advanced features:</p>
<ul>
<li>
<p><strong>Module Federation</strong></p>
<p>Rslib provides first-class support for <a href="/guide/advanced/module-federation">Module Federation</a>. Users only need to install the corresponding Rsbuild plugin to start debugging Module Federation and build MF format output. Users can publish libraries as remote modules to remote servers while building, or directly use remote modules.</p>
</li>
<li>
<p><strong>Leverage Rsbuild Features</strong></p>
<p>Rslib can reuse most of Rsbuild's configurations, supporting advanced features including but not limited to: <a href="https://rsbuild.rs/config/source/transform-import" target="_blank" rel="noopener noreferrer">import path transformation</a>, <a href="https://rsbuild.rs/config/output/inline-styles" target="_blank" rel="noopener noreferrer">inline styles</a>, <a href="https://rsbuild.rs/config/output/polyfill" target="_blank" rel="noopener noreferrer">polyfill</a>, and will continue to benefit from more features provided by Rsbuild's iterations in the future.</p>
</li>
<li>
<p><strong>Share Rspack and Rsbuild Ecosystem</strong></p>
<p>Based on the Rspack and Rsbuild ecosystem, Rslib can reuse a series of ecosystem features, including but not limited to:</p>
<ul>
<li>Use <a href="https://storybook.rsbuild.rs/guide/integrations/rslib.html" target="_blank" rel="noopener noreferrer">Storybook</a> to directly read Rslib's configuration files for UI component library development debugging.</li>
<li>Use <a href="https://rsdoctor.rs/" target="_blank" rel="noopener noreferrer">Rsdoctor</a> for build performance and output analysis.</li>
<li>Use <a href="https://github.com/rspack-contrib/rsbuild-plugin-node-polyfill" target="_blank" rel="noopener noreferrer">Node.js polyfill</a> plugin to develop cross-runtime libraries.</li>
<li>Use <a href="https://github.com/rspack-contrib/rsbuild-plugin-eslint" target="_blank" rel="noopener noreferrer">ESLint plugin</a> for ESLint validation during development.</li>
<li>Use <a href="https://github.com/rspack-contrib/rsbuild-plugin-publint" target="_blank" rel="noopener noreferrer">publint plugin</a> to check if the library's package.json is configured correctly.</li>
</ul>


<blockquote>
<p>For more plugin information, please refer to <a href="https://rsbuild.rs/plugins/list/" target="_blank" rel="noopener noreferrer">Rsbuild Plugin Overview</a>.</p>
</blockquote>
</li>
</ul>
<h2 id="current-status-and-version-evolution">Current status and version evolution<a aria-hidden="true" href="#current-status-and-version-evolution">#</a></h2>
<p>Currently, Rspack / Rsbuild / Rspress and other projects in the Rstack toolchain are using Rslib for building, with tens of thousands of weekly downloads, serving multiple businesses within ByteDance, and is also the <a href="https://module-federation.io/guide/basic/rsbuild.html#rslib-module" target="_blank" rel="noopener noreferrer">recommended solution</a> for Module Federation modules.</p>
<p>Rslib is currently in the 0.x stage and we plan to release v1.0 after achieving the following key goals:</p>
<ul>
<li>Stabilize the final configuration and API design</li>
<li>Optimize the quality of the build output</li>
<li>Support bundleless mode for Vue, Solid and more frameworks</li>
</ul>
<p>You can track the progress by checking v1.0 <a href="https://github.com/web-infra-dev/rslib/milestone/1" target="_blank" rel="noopener noreferrer">Milestone</a> on GitHub.</p>
<h2 id="start-using-rslib">Start using Rslib<a aria-hidden="true" href="#start-using-rslib">#</a></h2>
<p>We provide the scaffold tool <a href="/guide/start/quick-start">create-rslib</a> for quickly creating Rslib projects. This scaffold supports creating Node.js / React library projects and supporting development tools. Additionally, we provide <a href="/guide/migration/tsup">migration documentation</a> to help users migrate from other build tools to Rslib. You can experience developing React component libraries with Rslib in this <a href="https://codesandbox.io/p/devbox/rslib-demo-react-ts-7mqjsd" target="_blank" rel="noopener noreferrer">CodeSandbox</a>.</p>
<p>We believe that a unified toolchain based on Rspack will provide developers with more possibilities. Looking forward to your feedback and contributions to help us build a more complete frontend toolchain ecosystem together.</p>]]></content:encoded>
        </item>
    </channel>
</rss>